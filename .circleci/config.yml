# This is an example CircleCI configuration to build a shiny application
# into a Docker


################################################################################
# Functions
################################################################################

# Defaults
defaults: &defaults
  docker:
    - image: vanessa/docker-rize:3.5.2
  working_directory: /tmp/src

rize: &rize
    name: Run rize to create the Docker container
    command: |
        cd /tmp/src
        Rscript -e "rize::shiny_dockerize()"

dockerload: &dockerload
    name: Load Docker container Image
    no_output_timeout: 30m
    command: | 
      echo "Working directory is ${PWD}"
      docker info
      set +o pipefail
      if [ -f /tmp/cache/container.tar.gz ]; then
          apk update && apk add --no-cache pigz curl curl-dev
          pigz -d --stdout /tmp/cache/container.tar.gz | docker load
          docker images
      fi


dockersave: &dockersave
    name: Docker Save
    no_output_timeout: 40m
    command: |
        source ${BASH_ENV}
        echo "Saving ${CONTAINER_NAME}:${DOCKER_TAG} to container.tar.gz"
        mkdir -p /tmp/cache
        docker save ${CONTAINER_NAME}:${DOCKER_TAG} \
          | pigz -2 -p 3 > /tmp/cache/container.tar.gz


dockerdeploy: &dockerdeploy
    name: Deploy to Docker Hub
    no_output_timeout: 40m
    command: |
      source ${BASH_ENV}
      echo "Container name set to ${CONTAINER_NAME}:${DOCKER_TAG}"
      if [[ -n "$DOCKER_PASS" ]]; then
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push ${CONTAINER_NAME}:${DOCKER_TAG}
            echo "Tagging latest image..."
            docker tag ${CONTAINER_NAME}:${DOCKER_TAG} ${CONTAINER_NAME}:latest
            docker push ${CONTAINER_NAME}:latest
      fi

dockerbuild: &dockerbuild
    name: Build Docker Container
    no_output_timeout: 60m
    command: |
        echo "0. Building Docker Container"
        source ${BASH_ENV}
        if [ ! -f "${DOCKERFILE_PATH}" ]; then
            echo "Cannot find ${DOCKERFILE_PATH}, exiting build.";
            exit 1;
        else
            echo "Dockerfile found at ${DOCKERFILE_PATH}";
        fi
        docker build -f "${DOCKERFILE_PATH}" -t "${CONTAINER_NAME}:${DOCKER_TAG}" .
        docker ps
        docker images


################################################################################
# Jobs
################################################################################


version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - restore_cache:
          keys:
            - docker-v1-{{ .Branch }}
          paths:
            - /tmp/cache/container.tar.gz
      - checkout
      - setup_remote_docker
      - run: *rize
      - persist_to_workspace:
          root: /tmp
          paths:
            - cache/container.tar.gz
            - src

  update_cache:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /tmp
      - save_cache:
         key: docker-v1-{{ .Branch }}
         paths:
            - /tmp/cache/container.tar.gz

#  deploy:
#    <<: *defaults
#    steps:
#      - attach_workspace:
#          at: /tmp
#      - setup_remote_docker
#      - run: *dockerenv
#      - run: *dockerload
#      - run: *dockerdeploy


################################################################################
# Workflows
################################################################################


workflows:
  version: 2
  build_deploy:
    jobs:
      - build:
          filters:
            branches:
              ignore: gh-pages
            tags:
              only: /.*/

      - update_cache:
          requires:
            - build
          filters:
            branches:
              ignore: /docs?/.*/
            tags:
              only: /.*/

      # Upload the container to Docker Hub
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
            tags:
              only: /.*/
